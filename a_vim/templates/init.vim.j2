"Setup Plugins: {{ '{{{'  }}
call plug#begin('{{vim_plugin_dir}}')
" Install plugins {{ '{{{' }}
{% for plugin in vim_plugin_repos %}
Plug '{{plugin}}'
{% endfor %}
" {{ '}}}' }}
" Treat colors from repos as plugins {{ '{{{' }}
{% for colorscheme in vim_colour_repos %}
Plug '{{ colorscheme }}'
{% endfor %}
" {{ '}}}' }}
call plug#end()
" {{ '}}}' }}

"Plugin Settings {{ '{{{' }}
	"Deoplete {{ '{{{' }}
	let g:deoplete#enable_at_startup = 1
	" {{ '}}}' }}

	"Airline {{ '{{{' }}
	let g:airline#extensions#tabline#enabled = 1
	let g:airline_powerline_fonts = 1
	" {{ '}}}' }}

	" Syntastic {{ '{{{' }}
	let g:syntastic_python_checkers = ['pycodestyle']
	" {{ '}}}' }}
" {{ '}}}' }}

"General settings {{ '{{{' }}
set nohlsearch
set relativenumber
" {{ '}}}' }}

"Backup settings {{ '{{{' }}
if filewritable("$HOME/.vimbackups/") != 2
	call system("mkdir -p $HOME/.vimbackups")
endif
set backup
set backupdir=$HOME/.vimbackups
set backupcopy=auto
set writebackup
" {{ '}}}' }}

"Key Mappings {{ '{{{' }}
	"Window movements {{ '{{{' }}
	nnoremap <C-h> <c-w>h
	nnoremap <C-j> <c-w>j
	nnoremap <C-k> <c-w>k
	nnoremap <C-l> <c-w>l
	" {{ '}}}' }}

	" swap : and ; {{ '{{{' }}
	nnoremap : ;
	nnoremap ; :

	vnoremap : ;
	vnoremap ; :
	" {{ '}}}' }}

	"Visual block far more useful than regular visual mode {{ '{{{' }}
	nnoremap v <C-v>
	nnoremap <C-v> v
	" {{ '}}}' }}

	" make <c-y> <c-e> more useful by doing whole words {{ '{{{' }}
	inoremap <expr> <c-y> matchstr(getline(line('.')-1), '\%' . virtcol('.') . 'v\%(\k\+\\|.\)')
	inoremap <expr> <c-e> matchstr(getline(line('.')+1), '\%' . virtcol('.') . 'v\%(\k\+\\|.\)')
	" {{ '}}}' }}

	" Git fugitive mappings {{ '{{{' }}
	nnoremap <LEADER>gb :Gblame w<CR>
	nnoremap <LEADER>gd :Gdiff<SPACE>
	nnoremap <LEADER>gs :Gstatus<CR>
	nnoremap <LEADER>gc :Gcommit -v<CR>
	nnoremap <LEADER>gl :Glog<CR>
	nnoremap <LEADER>gr :Gread<CR>
	nnoremap <LEADER>ge :Gedit<CR>
	nnoremap <LEADER>gw :Gwrite<CR>
	" {{ '}}}' }}

	nnoremap <Leader>er :call OpenRC()

" {{ '}}}' }}

" Functions {{ '{{{' }}
function! TrimWhiteSpace() " {{ '{{{' }}
	%s/\s\+$//e
endfunction
" {{ '}}}' }}

function! IsBufferBlank() " {{ '{{{' }}
	if getline(1, '$') == [''] && ! &mod
		return 1
	else
		return 0
	endif
endfunction
" {{ '}}}' }}

function! OpenRC() " {{ '{{{' }}
	if IsBufferBlank()
		:edit $MYVIMRC
	else
		:vnew $MYVIMRC
	endif
endfunction
" {{ '}}}' }}

" {{ '}}}' }}

" Autocmds {{ '{{{' }}
if has("autocmd")

	augroup WHITESPACE " {{ '{{{' }}
		autocmd!
		autocmd FileWritePre,FileAppendPre,FilterWritePre,BufWritePre * if match(expand('%'), 'fugitive://') != 0 | :call TrimWhiteSpace()
	augroup END " {{ '}}}' }}

	augroup MAN " {{ '{{{' }}
		autocmd!
		autocmd FileType man exe "set nolist colorcolumn=\"\" nonu"
	augroup END " {{ '}}}' }}

	augroup reload_rc " {{ '{{{' }}
		autocmd!
		autocmd BufWritePost $MYVIMRC source $MYVIMRC
	augroup END " {{ '}}}' }}

endif
" {{ '}}}' }}

" Colours {{ '{{{' }}

	" Highlight 81st column {{ '{{{' }}
	highlight ColorColumn ctermbg=235
	call matchadd('ColorColumn', '\%81v', 100)
	" {{ '}}}' }}

	" Git conflict highlight {{ '{{{' }}
	highlight DIFFHEAD ctermfg=1
	highlight DIFFMIDDLE ctermfg=1
	highlight DIFFBRANCH ctermfg=1

	call matchadd('DIFFHEAD', '^<<<<<<< HEAD')
	call matchadd('DIFFMIDDLE', '^=======')
	call matchadd('DIFFBRANCH', '^>>>>>>>.*')
	" {{ '}}}' }}

" {{ '}}}' }}
